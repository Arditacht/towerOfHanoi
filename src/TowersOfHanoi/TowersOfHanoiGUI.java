package TowersOfHanoi;

import java.awt.Toolkit;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*<pre>
*   Class           TowersOfHanoiGUI
*   File            TowersOfHanoiGUI.java
*   Description     This program displays the tower of hanoi animation and it 
*                   solves it in two different methods. 
*   @author         <i>Ardit Miftaraj & Jonida Durbaku</i>
*   Environment     PC, Windows 10, NetBeans IDE 8.2, jdk 1.8.0_221
*   Date            03/10/2020
*   @version        1.0.0
*   @see            javax.swing.JFrame
*</pre>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
public class TowersOfHanoiGUI extends javax.swing.JFrame  {


    private int nrOfDisks;
    
    private int speed;
    TowerOfHanoiAnimate draw ;
    
    

    
    
    public TowersOfHanoiGUI() {
        initComponents();
        this.getRootPane().setDefaultButton(calculateJButton);
        //set icon for form
        this.setIconImage(Toolkit.getDefaultToolkit().getImage
        ("src/TowersOfHanoi/logo.jpg"));
        //center JFrame at start
        this.setLocationRelativeTo(null);
        setDate();
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		setDate()
    *	Description     set the date with DateFormat
    *   @see            java.text.DateFormat
    *   @see            java.text.SimpleDateFormat
    *   @author         <i>Jonida Durbaku</i>
    *	Date            03/10/2020
    *   History Log     
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public void setDate()
    {
        DateFormat dateFormat = new SimpleDateFormat ("MM/dd/yyyy");
        Date now = new Date ();
        this.setTitle("Towers Of Hanoi--"+ dateFormat.format(now));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        buttonsJPanel = new javax.swing.JPanel();
        animateJButton = new javax.swing.JButton();
        disksJLabel = new javax.swing.JLabel();
        methodJLabel = new javax.swing.JLabel();
        disksJComboBox = new javax.swing.JComboBox<>();
        methodJComboBox = new javax.swing.JComboBox<>();
        speedJLabel = new javax.swing.JLabel();
        speedJComboBox = new javax.swing.JComboBox<>();
        movesJLabel = new javax.swing.JLabel();
        timeJTextField = new javax.swing.JTextField();
        timeJLabel = new javax.swing.JLabel();
        movesJTextField = new javax.swing.JTextField();
        calculateJButton = new javax.swing.JButton();
        menuJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        clearJMenuItem = new javax.swing.JMenuItem();
        printJMenuItem = new javax.swing.JMenuItem();
        exitJMenuItem = new javax.swing.JMenuItem();
        runJMenu = new javax.swing.JMenu();
        calculateJMenuItem = new javax.swing.JMenuItem();
        animateJMenuItem = new javax.swing.JMenuItem();
        helpJMenuBar = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        animateJButton.setMnemonic('S');
        animateJButton.setText("Show Animation");
        animateJButton.setToolTipText("Show Animation");
        animateJButton.setEnabled(false);
        animateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animateJButtonActionPerformed(evt);
            }
        });

        disksJLabel.setText("Nr. of Disks:");

        methodJLabel.setText("Method:");

        disksJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Select:>", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        disksJComboBox.setToolTipText("Number of disks");

        methodJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Select:>", "Recursively", "Non-Recursively" }));
        methodJComboBox.setToolTipText("Method ");

        speedJLabel.setText("Speed:");

        speedJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Slow", "Medium", "Fast" }));
        speedJComboBox.setToolTipText("Speed");

        movesJLabel.setText("Moves:");

        timeJTextField.setEditable(false);
        timeJTextField.setToolTipText("Calculated time");

        timeJLabel.setText("Time:");

        movesJTextField.setEditable(false);
        movesJTextField.setToolTipText("moves calculated");

        calculateJButton.setMnemonic('e');
        calculateJButton.setText("Calculate");
        calculateJButton.setToolTipText("Calculate moves and time ");
        calculateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsJPanelLayout = new javax.swing.GroupLayout(buttonsJPanel);
        buttonsJPanel.setLayout(buttonsJPanelLayout);
        buttonsJPanelLayout.setHorizontalGroup(
            buttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonsJPanelLayout.createSequentialGroup()
                        .addComponent(movesJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(movesJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(animateJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timeJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(buttonsJPanelLayout.createSequentialGroup()
                        .addComponent(disksJLabel)
                        .addGap(18, 18, 18)
                        .addComponent(disksJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(buttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(calculateJButton)
                            .addGroup(buttonsJPanelLayout.createSequentialGroup()
                                .addComponent(methodJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(methodJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(speedJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(speedJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        buttonsJPanelLayout.setVerticalGroup(
            buttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(disksJLabel)
                    .addComponent(methodJLabel)
                    .addComponent(disksJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(methodJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speedJLabel)
                    .addComponent(speedJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calculateJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(movesJLabel)
                    .addComponent(timeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeJLabel)
                    .addComponent(movesJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(animateJButton))
                .addContainerGap())
        );

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");

        clearJMenuItem.setMnemonic('C');
        clearJMenuItem.setText("Clear");
        clearJMenuItem.setToolTipText("Clear Form");
        clearJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(clearJMenuItem);

        printJMenuItem.setMnemonic('P');
        printJMenuItem.setText("Print");
        printJMenuItem.setToolTipText("Print the form");
        printJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printJMenuItem);

        exitJMenuItem.setMnemonic('x');
        exitJMenuItem.setText("Exit");
        exitJMenuItem.setToolTipText("End the program");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        menuJMenuBar.add(fileJMenu);

        runJMenu.setMnemonic('R');
        runJMenu.setText("Run");
        runJMenu.setToolTipText("Run the program");

        calculateJMenuItem.setMnemonic('e');
        calculateJMenuItem.setText("Calculate");
        calculateJMenuItem.setToolTipText("Calculate the moves and time ");
        calculateJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateJMenuItemActionPerformed(evt);
            }
        });
        runJMenu.add(calculateJMenuItem);

        animateJMenuItem.setMnemonic('R');
        animateJMenuItem.setText("Show Animation");
        animateJMenuItem.setEnabled(false);
        runJMenu.add(animateJMenuItem);

        menuJMenuBar.add(runJMenu);

        helpJMenuBar.setMnemonic('H');
        helpJMenuBar.setText("Help");
        helpJMenuBar.setToolTipText("Help");

        aboutJMenuItem.setMnemonic('A');
        aboutJMenuItem.setText("About");
        aboutJMenuItem.setToolTipText("Info about the program");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpJMenuBar.add(aboutJMenuItem);

        menuJMenuBar.add(helpJMenuBar);

        setJMenuBar(menuJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonsJPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(buttonsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		animateJButtonActionPerformed()
    *	Description     shows the animation for the selected nr of disks
    *   @author         <i>Ardit Miftaraj</i>
    *	Date            03/10/2020 
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void animateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animateJButtonActionPerformed
        
        
        draw = new TowerOfHanoiAnimate();
        draw.setSpeed(speed);
        draw.setNrOfDisks(nrOfDisks);
        
        JFrame canvas = new JFrame();
        canvas.setSize(600, 400);
        canvas.setLocationRelativeTo(null);
        setDate();
            canvas.add(draw);
            canvas.setVisible(true);
            draw.setVisible(true);
            animateJButton.setEnabled(false);
    }//GEN-LAST:event_animateJButtonActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		calculateJButtonActionPerformed()
    *	Description     Calculates the moves and the method to solve it
    *   @author         <i>Jonida Durbaku</i>
    *	Date            03/10/2020 
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void calculateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateJButtonActionPerformed
        SolutionMethod method = new SolutionMethod();
        if(speedJComboBox.getSelectedIndex()==0)
            speed=40;
        else if (speedJComboBox.getSelectedIndex()==1)
            speed = 20;
        else
            speed = 5;
        try
        {
             nrOfDisks = Integer.parseInt(disksJComboBox.getItemAt(disksJComboBox.getSelectedIndex()));
             method.setNrOfDisks(nrOfDisks);
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "Please select the number of disks", "Input Error", JOptionPane.ERROR_MESSAGE);
            disksJComboBox.requestFocus(true);
            return;
        }
        
        try
        {
            switch (methodJComboBox.getSelectedIndex()) {
                case 2:
                    
                        method.nonResursiveSolution(nrOfDisks);
                        long timer = method.getTimer();
                        timeJTextField.setText(""+timer);
                        animateJButton.setEnabled(true);
                        animateJMenuItem.setEnabled(true);
                        movesJTextField.setText(""+(int)(Math.pow(2.0,nrOfDisks)-1));
                        break;
                    
                case 1:
                    {
                        resursiveSolution(nrOfDisks, 0, 2, 1);
                        animateJButton.setEnabled(true);
                        animateJMenuItem.setEnabled(true);
                        movesJTextField.setText(""+(int)(Math.pow(2.0,nrOfDisks)-1));
                        break;
                    }
                default:
                    {
                    JOptionPane.showMessageDialog(this, "Please select the method of solution", "Input Error", JOptionPane.ERROR_MESSAGE);
                    methodJComboBox.requestFocus(true);
                    break;
                    }
            }
            
        }
        catch(StackOverflowError e)
        {
          
        }
        
       
    }//GEN-LAST:event_calculateJButtonActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		calculateJMenuItemActionPerformed()
    *	Description     Passes the ActionEvent evt to the calculateJButton
    *   @author         <i>Jonida Durbaku</i>
    *	Date            03/10/2020 
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void calculateJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateJMenuItemActionPerformed
       calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_calculateJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		clearJMenuItemActionPerformed()
    *	Description     Clears the form
    *   @author         <i>Jonida Durbaku</i>
    *	Date            03/10/2020 
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void clearJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJMenuItemActionPerformed
        animateJMenuItem.setEnabled(false);
        animateJButton.setEnabled(false);
        movesJTextField.setText("");
        timeJTextField.setText("");
        speedJComboBox.setSelectedIndex(0);
        methodJComboBox.setSelectedIndex(0);
        disksJComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_clearJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		printJMenuItemActionPerformed()
    *	Description     Prints the form
    *   @author         <i>Jonida Durbaku</i>
    *	Date            03/10/2020 
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void printJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printJMenuItemActionPerformed
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		aboutJMenuItemActionPerformed()
    *	Description     Displays the about form
    *   @author         <i>Jonida Durbaku</i>
    *	Date            03/10/2020 
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutJMenuItemActionPerformed
        TowersOfHanoiAbout myAbout = new TowersOfHanoiAbout(this,true);
       myAbout.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed
/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		exitJMenuItemActionPerformed()
    *	Description     End the form
    *   @author         <i>Jonida Durbaku</i>
    *	Date            03/10/2020 
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    
    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		resursiveSolution()
    *	Description     Solves recursively the tower of hanoi
    *   @param          nrOfDisks int
    *   @param          from int
    *   @param          to int
    *   @param          spare int
    *   @author         <i>Jonida Durbaku</i>
    *	Date            03/10/2020 
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public void resursiveSolution(int nrOfDisks, int from, int to, int spare)
    {
        long timerStart = System.currentTimeMillis();
        if (nrOfDisks == 1){
            System.out.println("mooved disk " + nrOfDisks + " from " + from + " to " + to);
        }
            else {
            resursiveSolution(nrOfDisks-1, from, spare, to);
            System.out.println("mooved disk " + nrOfDisks + " from " + from + " to " + to);
            resursiveSolution(nrOfDisks-1, spare, to, from);
        }
        long timerStop = System.currentTimeMillis();
                        timeJTextField.setText(""+(timerStop-timerStart));
    }
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    *	Method		main()
    *	Description     Call the contructor to create an instance of the form
    *	@param		args are the command line strings
    *	@author         <i>Jonida Durbaku</i>
    *	Date            02/10/2020
    *   History Log     
    *</pre>
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TowersOfHanoiGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TowersOfHanoiGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TowersOfHanoiGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TowersOfHanoiGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
                Splash mySplash = new Splash(4000);
                mySplash.showSplash();
                new TowersOfHanoiGUI().setVisible(true);
         //   }
       // });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JButton animateJButton;
    private javax.swing.JMenuItem animateJMenuItem;
    private javax.swing.JPanel buttonsJPanel;
    private javax.swing.JButton calculateJButton;
    private javax.swing.JMenuItem calculateJMenuItem;
    private javax.swing.JMenuItem clearJMenuItem;
    private javax.swing.JComboBox<String> disksJComboBox;
    private javax.swing.JLabel disksJLabel;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JMenu helpJMenuBar;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenuBar menuJMenuBar;
    private javax.swing.JComboBox<String> methodJComboBox;
    private javax.swing.JLabel methodJLabel;
    private javax.swing.JLabel movesJLabel;
    private javax.swing.JTextField movesJTextField;
    private javax.swing.JMenuItem printJMenuItem;
    private javax.swing.JMenu runJMenu;
    private javax.swing.JComboBox<String> speedJComboBox;
    private javax.swing.JLabel speedJLabel;
    private javax.swing.JLabel timeJLabel;
    private javax.swing.JTextField timeJTextField;
    // End of variables declaration//GEN-END:variables
}
